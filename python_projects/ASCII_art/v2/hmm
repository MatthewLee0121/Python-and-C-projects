import tkinter as tk
from PIL import Image, ImageDraw, ImageFont

def render_widget_on_virtual_canvas(widget, output_path="virtual_canvas_screenshot.png"):
    # Get all the text from the widget
    text_content = widget.get("1.0", "end-1c")  # Fetch text without the trailing newline

    # Load a font (you can use a system font or a custom one)
    font = ImageFont.load_default()  # Default monospaced font
    lines = text_content.split("\n")  # Split into lines for rendering

    # Measure dimensions using getbbox
    char_bbox = font.getbbox("A")  # Get bounding box for a single character
    char_width, char_height = char_bbox[2] - char_bbox[0], char_bbox[3] - char_bbox[1]
    max_line_length = max(len(line) for line in lines)
    canvas_width = char_width * max_line_length + 20  # Add some padding
    canvas_height = char_height * len(lines) + 20  # Add some padding

    # Create a virtual canvas (image)
    canvas = Image.new("RGB", (canvas_width, canvas_height), "white")
    draw = ImageDraw.Draw(canvas)

    # Draw the text onto the virtual canvas
    for i, line in enumerate(lines):
        draw.text((10, i * char_height), line, font=font, fill="black")  # Add padding

    # Save the image
    canvas.save(output_path)
    print(f"Virtual canvas screenshot saved as {output_path}")

# Example usage
root = tk.Tk()

# Create a Text widget and insert some content
text_widget = tk.Text(root, width=40, height=10, wrap="word")
text_widget.insert("1.0", "This is an example of a Tkinter Text widget.\n" * 20)
text_widget.pack()

# Button to trigger the screenshot capture
capture_button = tk.Button(
    root,
    text="Render on Virtual Canvas",
    command=lambda: render_widget_on_virtual_canvas(text_widget)
)
capture_button.pack()

root.mainloop()
